/**
 * unknown
 * unknown
 *
 * OpenAPI spec version: last
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

export interface ParamsgwCommentsGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwCommentsPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwCommentsPost = models.GwCommentsBody;
export interface ParamsgwCommentsidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 评论ID
}
export interface ParamsgwCommentsidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 评论ID
}
export interface ParamsgwCommentsidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 评论ID
}
export type ParamsBodygwCommentsidPut = models.GwCommentsIdBody;
export interface ParamsgwOrdersGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwOrdersPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwOrdersPost = models.GwOrdersBody;
export interface ParamsgwOrdersidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 订单ID
}
export interface ParamsgwOrdersidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 订单ID
}
export interface ParamsgwOrdersidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 订单ID
}
export type ParamsBodygwOrdersidPut = models.GwOrdersIdBody;
export interface ParamsgwPackagedetailsGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwPackagedetailsPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwPackagedetailsPost = models.GwPackagedetailsBody;
export interface ParamsgwPackagedetailsidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐明细ID
}
export interface ParamsgwPackagedetailsidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐明细ID
}
export interface ParamsgwPackagedetailsidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐明细ID
}
export type ParamsBodygwPackagedetailsidPut = models.GwPackagedetailsIdBody;
export interface ParamsgwPackagesGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwPackagesPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwPackagesPost = models.GwPackagesBody;
export interface ParamsgwPackagesidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐ID
}
export interface ParamsgwPackagesidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐ID
}
export interface ParamsgwPackagesidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 套餐ID
}
export type ParamsBodygwPackagesidPut = models.GwPackagesIdBody;
export interface ParamsgwShopsGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwShopsPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwShopsPost = models.GwShopsBody;
export interface ParamsgwShopsidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 店铺ID
}
export interface ParamsgwShopsidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 店铺ID
}
export interface ParamsgwShopsidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 店铺ID
}
export type ParamsBodygwShopsidPut = models.GwShopsIdBody;
export interface ParamsgwUsersGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwUsersPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwUsersPost = models.GwUsersBody;
export interface ParamsgwUsersidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 用户ID
}
export interface ParamsgwUsersidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 用户ID
}
export interface ParamsgwUsersidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 用户ID
}
export type ParamsBodygwUsersidPut = models.GwUsersIdBody;
export interface ParamsgwVouchersGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamsgwVouchersPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodygwVouchersPost = models.GwVouchersBody;
export interface ParamsgwVouchersidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 抵用券ID
}
export interface ParamsgwVouchersidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 抵用券ID
}
export interface ParamsgwVouchersidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 抵用券ID
}
export type ParamsBodygwVouchersidPut = models.GwVouchersIdBody;
export interface ParamssysDictionarycategorysGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamssysDictionarycategorysPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodysysDictionarycategorysPost = models.SysDictionarycategorysBody;
export interface ParamssysDictionarycategorysidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典分类ID
}
export interface ParamssysDictionarycategorysidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典分类ID
}
export interface ParamssysDictionarycategorysidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典分类ID
}
export type ParamsBodysysDictionarycategorysidPut = models.SysDictionarycategorysIdBody;
export interface ParamssysDictionarysGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // queryParams
  pageIndex?: string; // 当前页码，从1开始，最大支持100000，默认是1。
  pageSize?: string; // 每页记录数，从1开始，最大支持500，默认是15。
}
export interface ParamssysDictionarysPost {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
}
export type ParamsBodysysDictionarysPost = models.SysDictionarysBody;
export interface ParamssysDictionarysidDelete {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典ID
}
export interface ParamssysDictionarysidGet {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典ID
}
export interface ParamssysDictionarysidPut {
  // headerParams
  Authorization: string; // Authorization (Only:Bearer jwt的值)
  // pathParams
  id: string; // 字典ID
}
export type ParamsBodysysDictionarysidPut = models.SysDictionarysIdBody;
export class DefaultApi {
  protected $basePath = '';

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath;
    }
  }

  /**
   * ``` 获取【评论管理】列表 ```
   * @summary 获取【评论管理】列表
   * @param params ParamsgwCommentsGet
   
   */
  public gwCommentsGet = (
    params: ParamsgwCommentsGet,
    
  ) : AjaxPromise<models.GwComments>  => {
    const path = '/gw_comments';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【评论管理】信息 ```
   * @summary 插入【评论管理】信息
   * @param params ParamsgwCommentsPost
   * @param body: ParamsBodygwCommentsPost
   */
  public gwCommentsPost = (
    params: ParamsgwCommentsPost,
    data: ParamsBodygwCommentsPost
  ) : AjaxPromise<models.GwComments1>  => {
    const path = '/gw_comments';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【评论管理】信息 ```
   * @summary 删除【评论管理】信息
   * @param params ParamsgwCommentsidDelete
   
   */
  public gwCommentsidDelete = (
    params: ParamsgwCommentsidDelete,
    
  ) : AjaxPromise<models.GwCommentsId1>  => {
    const path = '/gw_comments/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【评论管理】信息 ```
   * @summary 获取【评论管理】信息
   * @param params ParamsgwCommentsidGet
   
   */
  public gwCommentsidGet = (
    params: ParamsgwCommentsidGet,
    
  ) : AjaxPromise<models.GwCommentsId>  => {
    const path = '/gw_comments/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【评论管理】信息 ```
   * @summary 修改【评论管理】信息
   * @param params ParamsgwCommentsidPut
   * @param body: ParamsBodygwCommentsidPut
   */
  public gwCommentsidPut = (
    params: ParamsgwCommentsidPut,
    data: ParamsBodygwCommentsidPut
  ) : AjaxPromise<models.GwCommentsId1>  => {
    const path = '/gw_comments/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【订单管理】列表 ```
   * @summary 获取【订单管理】列表
   * @param params ParamsgwOrdersGet
   
   */
  public gwOrdersGet = (
    params: ParamsgwOrdersGet,
    
  ) : AjaxPromise<models.GwOrders>  => {
    const path = '/gw_orders';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【订单管理】信息 ```
   * @summary 插入【订单管理】信息
   * @param params ParamsgwOrdersPost
   * @param body: ParamsBodygwOrdersPost
   */
  public gwOrdersPost = (
    params: ParamsgwOrdersPost,
    data: ParamsBodygwOrdersPost
  ) : AjaxPromise<models.GwOrders1>  => {
    const path = '/gw_orders';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【订单管理】信息 ```
   * @summary 删除【订单管理】信息
   * @param params ParamsgwOrdersidDelete
   
   */
  public gwOrdersidDelete = (
    params: ParamsgwOrdersidDelete,
    
  ) : AjaxPromise<models.GwOrdersId1>  => {
    const path = '/gw_orders/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【订单管理】信息 ```
   * @summary 获取【订单管理】信息
   * @param params ParamsgwOrdersidGet
   
   */
  public gwOrdersidGet = (
    params: ParamsgwOrdersidGet,
    
  ) : AjaxPromise<models.GwOrdersId>  => {
    const path = '/gw_orders/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【订单管理】信息 ```
   * @summary 修改【订单管理】信息
   * @param params ParamsgwOrdersidPut
   * @param body: ParamsBodygwOrdersidPut
   */
  public gwOrdersidPut = (
    params: ParamsgwOrdersidPut,
    data: ParamsBodygwOrdersidPut
  ) : AjaxPromise<models.GwOrdersId1>  => {
    const path = '/gw_orders/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【套餐明细管理】列表 ```
   * @summary 获取【套餐明细管理】列表
   * @param params ParamsgwPackagedetailsGet
   
   */
  public gwPackagedetailsGet = (
    params: ParamsgwPackagedetailsGet,
    
  ) : AjaxPromise<models.GwPackagedetails>  => {
    const path = '/gw_packagedetails';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【套餐明细管理】信息 ```
   * @summary 插入【套餐明细管理】信息
   * @param params ParamsgwPackagedetailsPost
   * @param body: ParamsBodygwPackagedetailsPost
   */
  public gwPackagedetailsPost = (
    params: ParamsgwPackagedetailsPost,
    data: ParamsBodygwPackagedetailsPost
  ) : AjaxPromise<models.GwPackagedetails1>  => {
    const path = '/gw_packagedetails';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【套餐明细管理】信息 ```
   * @summary 删除【套餐明细管理】信息
   * @param params ParamsgwPackagedetailsidDelete
   
   */
  public gwPackagedetailsidDelete = (
    params: ParamsgwPackagedetailsidDelete,
    
  ) : AjaxPromise<models.GwPackagedetailsId1>  => {
    const path = '/gw_packagedetails/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【套餐明细管理】信息 ```
   * @summary 获取【套餐明细管理】信息
   * @param params ParamsgwPackagedetailsidGet
   
   */
  public gwPackagedetailsidGet = (
    params: ParamsgwPackagedetailsidGet,
    
  ) : AjaxPromise<models.GwPackagedetailsId>  => {
    const path = '/gw_packagedetails/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【套餐明细管理】信息 ```
   * @summary 修改【套餐明细管理】信息
   * @param params ParamsgwPackagedetailsidPut
   * @param body: ParamsBodygwPackagedetailsidPut
   */
  public gwPackagedetailsidPut = (
    params: ParamsgwPackagedetailsidPut,
    data: ParamsBodygwPackagedetailsidPut
  ) : AjaxPromise<models.GwPackagedetailsId1>  => {
    const path = '/gw_packagedetails/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【套餐管理】列表 ```
   * @summary 获取【套餐管理】列表
   * @param params ParamsgwPackagesGet
   
   */
  public gwPackagesGet = (
    params: ParamsgwPackagesGet,
    
  ) : AjaxPromise<models.GwPackages>  => {
    const path = '/gw_packages';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【套餐管理】信息 ```
   * @summary 插入【套餐管理】信息
   * @param params ParamsgwPackagesPost
   * @param body: ParamsBodygwPackagesPost
   */
  public gwPackagesPost = (
    params: ParamsgwPackagesPost,
    data: ParamsBodygwPackagesPost
  ) : AjaxPromise<models.GwPackages1>  => {
    const path = '/gw_packages';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【套餐管理】信息 ```
   * @summary 删除【套餐管理】信息
   * @param params ParamsgwPackagesidDelete
   
   */
  public gwPackagesidDelete = (
    params: ParamsgwPackagesidDelete,
    
  ) : AjaxPromise<models.GwPackagesId1>  => {
    const path = '/gw_packages/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【套餐管理】信息 ```
   * @summary 获取【套餐管理】信息
   * @param params ParamsgwPackagesidGet
   
   */
  public gwPackagesidGet = (
    params: ParamsgwPackagesidGet,
    
  ) : AjaxPromise<models.GwPackagesId>  => {
    const path = '/gw_packages/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【套餐管理】信息 ```
   * @summary 修改【套餐管理】信息
   * @param params ParamsgwPackagesidPut
   * @param body: ParamsBodygwPackagesidPut
   */
  public gwPackagesidPut = (
    params: ParamsgwPackagesidPut,
    data: ParamsBodygwPackagesidPut
  ) : AjaxPromise<models.GwPackagesId1>  => {
    const path = '/gw_packages/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【店铺管理】列表 ```
   * @summary 获取【店铺管理】列表
   * @param params ParamsgwShopsGet
   
   */
  public gwShopsGet = (
    params: ParamsgwShopsGet,
    
  ) : AjaxPromise<models.GwShops>  => {
    const path = '/gw_shops';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【店铺管理】信息 ```
   * @summary 插入【店铺管理】信息
   * @param params ParamsgwShopsPost
   * @param body: ParamsBodygwShopsPost
   */
  public gwShopsPost = (
    params: ParamsgwShopsPost,
    data: ParamsBodygwShopsPost
  ) : AjaxPromise<models.GwShops1>  => {
    const path = '/gw_shops';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【店铺管理】信息 ```
   * @summary 删除【店铺管理】信息
   * @param params ParamsgwShopsidDelete
   
   */
  public gwShopsidDelete = (
    params: ParamsgwShopsidDelete,
    
  ) : AjaxPromise<models.GwShopsId1>  => {
    const path = '/gw_shops/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【店铺管理】信息 ```
   * @summary 获取【店铺管理】信息
   * @param params ParamsgwShopsidGet
   
   */
  public gwShopsidGet = (
    params: ParamsgwShopsidGet,
    
  ) : AjaxPromise<models.GwShopsId>  => {
    const path = '/gw_shops/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【店铺管理】信息 ```
   * @summary 修改【店铺管理】信息
   * @param params ParamsgwShopsidPut
   * @param body: ParamsBodygwShopsidPut
   */
  public gwShopsidPut = (
    params: ParamsgwShopsidPut,
    data: ParamsBodygwShopsidPut
  ) : AjaxPromise<models.GwShopsId1>  => {
    const path = '/gw_shops/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【用户管理】列表 ```
   * @summary 获取【用户管理】列表
   * @param params ParamsgwUsersGet
   
   */
  public gwUsersGet = (
    params: ParamsgwUsersGet,
    
  ) : AjaxPromise<models.GwUsers>  => {
    const path = '/gw_users';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【用户管理】信息 ```
   * @summary 插入【用户管理】信息
   * @param params ParamsgwUsersPost
   * @param body: ParamsBodygwUsersPost
   */
  public gwUsersPost = (
    params: ParamsgwUsersPost,
    data: ParamsBodygwUsersPost
  ) : AjaxPromise<models.GwUsers1>  => {
    const path = '/gw_users';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【用户管理】信息 ```
   * @summary 删除【用户管理】信息
   * @param params ParamsgwUsersidDelete
   
   */
  public gwUsersidDelete = (
    params: ParamsgwUsersidDelete,
    
  ) : AjaxPromise<models.GwUsersId1>  => {
    const path = '/gw_users/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【用户管理】信息 ```
   * @summary 获取【用户管理】信息
   * @param params ParamsgwUsersidGet
   
   */
  public gwUsersidGet = (
    params: ParamsgwUsersidGet,
    
  ) : AjaxPromise<models.GwUsersId>  => {
    const path = '/gw_users/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【用户管理】信息 ```
   * @summary 修改【用户管理】信息
   * @param params ParamsgwUsersidPut
   * @param body: ParamsBodygwUsersidPut
   */
  public gwUsersidPut = (
    params: ParamsgwUsersidPut,
    data: ParamsBodygwUsersidPut
  ) : AjaxPromise<models.GwUsersId1>  => {
    const path = '/gw_users/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【抵用券管理】列表 ```
   * @summary 获取【抵用券管理】列表
   * @param params ParamsgwVouchersGet
   
   */
  public gwVouchersGet = (
    params: ParamsgwVouchersGet,
    
  ) : AjaxPromise<models.GwVouchers>  => {
    const path = '/gw_vouchers';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【抵用券管理】信息 ```
   * @summary 插入【抵用券管理】信息
   * @param params ParamsgwVouchersPost
   * @param body: ParamsBodygwVouchersPost
   */
  public gwVouchersPost = (
    params: ParamsgwVouchersPost,
    data: ParamsBodygwVouchersPost
  ) : AjaxPromise<models.GwVouchers1>  => {
    const path = '/gw_vouchers';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【抵用券管理】信息 ```
   * @summary 删除【抵用券管理】信息
   * @param params ParamsgwVouchersidDelete
   
   */
  public gwVouchersidDelete = (
    params: ParamsgwVouchersidDelete,
    
  ) : AjaxPromise<models.GwVouchersId1>  => {
    const path = '/gw_vouchers/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【抵用券管理】信息 ```
   * @summary 获取【抵用券管理】信息
   * @param params ParamsgwVouchersidGet
   
   */
  public gwVouchersidGet = (
    params: ParamsgwVouchersidGet,
    
  ) : AjaxPromise<models.GwVouchersId>  => {
    const path = '/gw_vouchers/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【抵用券管理】信息 ```
   * @summary 修改【抵用券管理】信息
   * @param params ParamsgwVouchersidPut
   * @param body: ParamsBodygwVouchersidPut
   */
  public gwVouchersidPut = (
    params: ParamsgwVouchersidPut,
    data: ParamsBodygwVouchersidPut
  ) : AjaxPromise<models.GwVouchersId1>  => {
    const path = '/gw_vouchers/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【字典分类】列表 ```
   * @summary 获取【字典分类】列表
   * @param params ParamssysDictionarycategorysGet
   
   */
  public sysDictionarycategorysGet = (
    params: ParamssysDictionarycategorysGet,
    
  ) : AjaxPromise<models.SysDictionarycategorys>  => {
    const path = '/sys_dictionarycategorys';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【字典分类】信息 ```
   * @summary 插入【字典分类】信息
   * @param params ParamssysDictionarycategorysPost
   * @param body: ParamsBodysysDictionarycategorysPost
   */
  public sysDictionarycategorysPost = (
    params: ParamssysDictionarycategorysPost,
    data: ParamsBodysysDictionarycategorysPost
  ) : AjaxPromise<models.SysDictionarycategorys1>  => {
    const path = '/sys_dictionarycategorys';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【字典分类】信息 ```
   * @summary 删除【字典分类】信息
   * @param params ParamssysDictionarycategorysidDelete
   
   */
  public sysDictionarycategorysidDelete = (
    params: ParamssysDictionarycategorysidDelete,
    
  ) : AjaxPromise<models.SysDictionarycategorysId1>  => {
    const path = '/sys_dictionarycategorys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【字典分类】信息 ```
   * @summary 获取【字典分类】信息
   * @param params ParamssysDictionarycategorysidGet
   
   */
  public sysDictionarycategorysidGet = (
    params: ParamssysDictionarycategorysidGet,
    
  ) : AjaxPromise<models.SysDictionarycategorysId>  => {
    const path = '/sys_dictionarycategorys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【字典分类】信息 ```
   * @summary 修改【字典分类】信息
   * @param params ParamssysDictionarycategorysidPut
   * @param body: ParamsBodysysDictionarycategorysidPut
   */
  public sysDictionarycategorysidPut = (
    params: ParamssysDictionarycategorysidPut,
    data: ParamsBodysysDictionarycategorysidPut
  ) : AjaxPromise<models.SysDictionarycategorysId1>  => {
    const path = '/sys_dictionarycategorys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【字典表】列表 ```
   * @summary 获取【字典表】列表
   * @param params ParamssysDictionarysGet
   
   */
  public sysDictionarysGet = (
    params: ParamssysDictionarysGet,
    
  ) : AjaxPromise<models.SysDictionarys>  => {
    const path = '/sys_dictionarys';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageIndex' in params) p.query.pageIndex = params.pageIndex;
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 插入【字典表】信息 ```
   * @summary 插入【字典表】信息
   * @param params ParamssysDictionarysPost
   * @param body: ParamsBodysysDictionarysPost
   */
  public sysDictionarysPost = (
    params: ParamssysDictionarysPost,
    data: ParamsBodysysDictionarysPost
  ) : AjaxPromise<models.SysDictionarys1>  => {
    const path = '/sys_dictionarys';
    const url = this.$basePath + path;
    const p: any = {};
    p.data = data;
    return ajax.ajax({
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 删除【字典表】信息 ```
   * @summary 删除【字典表】信息
   * @param params ParamssysDictionarysidDelete
   
   */
  public sysDictionarysidDelete = (
    params: ParamssysDictionarysidDelete,
    
  ) : AjaxPromise<models.SysDictionarysId1>  => {
    const path = '/sys_dictionarys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'DELETE',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 获取【字典表】信息 ```
   * @summary 获取【字典表】信息
   * @param params ParamssysDictionarysidGet
   
   */
  public sysDictionarysidGet = (
    params: ParamssysDictionarysidGet,
    
  ) : AjaxPromise<models.SysDictionarysId>  => {
    const path = '/sys_dictionarys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    return ajax.ajax({
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * ``` 修改【字典表】信息 ```
   * @summary 修改【字典表】信息
   * @param params ParamssysDictionarysidPut
   * @param body: ParamsBodysysDictionarysidPut
   */
  public sysDictionarysidPut = (
    params: ParamssysDictionarysidPut,
    data: ParamsBodysysDictionarysidPut
  ) : AjaxPromise<models.SysDictionarysId1>  => {
    const path = '/sys_dictionarys/:id';
    const url = this.$basePath + path
      .replace(/\{([^}]+)\}/g, (all, param) => (param in params ? params[param] : param));
    const p: any = {};
    ajax.check(params.id, 'id');
    p.data = data;
    return ajax.ajax({
      method: 'PUT',
      url,
      ...p
    }, path, this.$basePath);
  }
}

export default new DefaultApi();